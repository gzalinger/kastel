-- class devoted to saving out levels
-- NOTE: this is achieved by printing; output of editor must be piped into the lLevel.lua file

EditorSaveUtil = {}
EditorSaveUtil.__index = EditorSaveUtil


function EditorSaveUtil.save()
	print("-- GENERATED BY SCRIPT: DO NOT EDIT")
	print("--  this is where editor loads and saves level. Copy and paste from here to normal game")
	print("")
	print("")
	print("")
	print("function initLevels()")
	print("\tlevels = {}")
	local idx = 1
	for key, level in pairs(levels) do
		EditorSaveUtil.printLevel(idx, level)
		idx = idx + 1
	end
	print("end")
	print("")
	print("-- ====================================================")
end

-- ====================================================

function EditorSaveUtil.printTable(tbl)
	local str = ""
	for key, child in pairs(tbl) do
		str = str .. key .. " = "
		if type(child) == "table" then
			str = str .. "{" .. EditorSaveUtil.printTable(child) .. "}"
		elseif type(child) == "boolean" then
			if child then
				str = str .. "true"
			else
				str = str .. "false"
			end
		elseif type(child) == "string" then
			str = str .. "\"" .. child .. "\""
		else
			str = str .. child
		end
		str = str .. ", "
	end
	return str:sub(1, str:len() - 2) --sub call here removes last comma and space
end

-- ====================================================		

function EditorSaveUtil.printLevel(idx, level)
	local str = "levels[" .. idx .. "] = {" .. EditorSaveUtil.printTable(level) .. "}"
	print(str)
end

-- ====================================================
--[[
function EditorSaveUtil.printLevel(idx, level)
	local str = "levels[" .. idx .. "] = {id = " .. idx .. ", "
	--map blueprint:
	str = str .. "mapBlueprint = {width = " .. level.mapBlueprint.width .. ", height = " .. level.mapBlueprint.height .. ", defaultTerrainType = " .. level.mapBlueprint.defaultTerrainType .. ", townHallLoc = {x = " .. level.mapBlueprint.townHallLoc.x .. ", y = " .. level.mapBlueprint.townHallLoc.y .. "},"
	str = str .. "terrain = {"
	for key, terr in pairs(level.mapBlueprint.terrain) do
		str = str .. "{x=" .. terr.x .. ",y=" .. terr.y .. ",terrain=" .. terr.terain .. "}"
		if key < #levelmapBlueprint.terrain then
			str = str .. ","
		end
	end
	str = str .. "}, roads = {"
	for key, road in pairs(level.mapBlueprint.roads) do
		str = str .. "{x=" .. road.x .. ",y=" .. road.y .. "}"
		if key < #level.mapBlueprint.roads then
			str = str .. ","
		end
	end
	str = str .. "}}"
	--initial resources:
	str = str .. "initialResources = {gold = " .. level.initialResources.gold .. ", timber = " .. level.initialResources.timber .. ", stone = " .. level.initialResources.stone .. "}, "
	str = str .. "initialPeasantPopulation = " .. level.initialPeasantPopulation .. ","
	--initial city:
	str = str .. "initialStructures = {"
	for key, struct in pairs(level.initialStructures) do
		str = str .. "{structType=" .. struct.structType
	end
	str = str .. "}, initialVillageStructures = {"
end
--]]
-- ====================================================		